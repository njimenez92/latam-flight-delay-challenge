name: 'Continuous Delivery'

on:
  push:
    branches:
      - develop
      - main
      - 'release/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del código
      - name: Checkout repository
        uses: actions/checkout@v3

      # Paso 2: Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Paso 3: Instalar Poetry manualmente
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Paso 4: Instalar dependencias
      - name: Install dependencies
        run: |
          poetry install --no-dev

      # Paso 5: Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Paso 6: Iniciar sesión en Google Cloud
      - name: Login to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Paso 7: Configurar Google Cloud SDK
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: 'gcloud'

      # Paso 9: Configurar Docker para Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Paso 10: Construir la imagen Docker
      - name: Build Docker Image
        run: |
          docker build -t us-central1-docker.pkg.dev/latam-flight-delay-challenge/latam-flight-delay-challenge-repo/latam-flight-delay-challenge:${{ github.sha }} .

      # Paso 11: Empujar la imagen Docker
      - name: Push Docker Image
        run: |
          docker push us-central1-docker.pkg.dev/latam-flight-delay-challenge/latam-flight-delay-challenge-repo/latam-flight-delay-challenge:${{ github.sha }}

      # Paso 12: Determinar el entorno de despliegue
      - name: Set Deployment Environment
        id: set_env
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "SERVICE_NAME=latam-flight-delay-challenge-prod" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "SERVICE_NAME=latam-flight-delay-challenge-staging" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == refs/heads/release/* ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "SERVICE_NAME=latam-flight-delay-challenge-staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "SERVICE_NAME=latam-flight-delay-challenge-staging" >> $GITHUB_ENV
          fi

      # Paso 13: Desplegar en Google Cloud Run
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image us-central1-docker.pkg.dev/latam-flight-delay-challenge/latam-flight-delay-challenge-repo/latam-flight-delay-challenge:${{ github.sha }} \
            --region us-central1 \
            --platform managed \
            --allow-unauthenticated \
            --update-env-vars PORT=8080 \
            --timeout=300
